use futures::{
    future::{self, Ready},
    prelude::*,
};
use std::env;
use std::process;
use std::sync::{Arc, Mutex};
use tarpc::{
    client, context,
    server::{self, incoming::Incoming, Channel},
};

type TaskType = i32;
type TaskStatus = i32;
type ExitTask = i32;
type Finished = i32;

#[derive(Debug)]
struct GetReduceCountArgs {}

#[derive(Debug)]
struct GetReduceCountReply {
    reduce_count: i32,
}

#[derive(Debug)]
struct RequestTaskArgs {
    worker_id: i32,
}

#[derive(Debug)]
struct RequestTaskReply {
    task_type: TaskType,
    task_id: i32,
    task_file: String,
}

#[derive(Debug)]
struct ReportTaskArgs {
    worker_id: i32,
    task_type: TaskType,
    task_id: i32,
}

#[derive(Debug)]
struct ReportTaskReply {
    can_exit: bool,
}

#[derive(Clone)]
struct Task {
    typ: TaskType,
    status: TaskStatus,
    index: i32,
    file: String,
    worker_id: i32,
}

#[derive(Clone)]
struct Coordinator {
    mu: Arc<Mutex<Vec<Task>>>,
    map_tasks: Vec<Task>,
    reduce_tasks: Vec<Task>,
    n_map: i32,
    n_reduce: i32,
}

// This is the service definition. It looks like a trait definition.
// It defines one RPC, hello, which takes one arg, name, and returns a String.
#[tarpc::service]
trait Protocol {
    async fn get_reduce_count(args: &'static GetReduceCountArgs) -> GetReduceCountReply;
    async fn request_task(args: &'static RequestTaskArgs) -> RequestTaskReply;
    async fn report_task(args: &'static ReportTaskArgs) -> ReportTaskReply;
}

impl Coordinator {
    fn new() -> Coordinator {
        Coordinator {
            mu: Arc::new(Mutex::new(Vec::new())),
            map_tasks: Vec::new(),
            reduce_tasks: Vec::new(),
            n_map: 0,
            n_reduce: 0,
        }
    }
}

impl Protocol for Coordinator {
    type GetReduceCountFut = Ready<GetReduceCountReply>;

    fn get_reduce_count(
        self,
        _: context::Context,
        args: &'static GetReduceCountArgs,
    ) -> Self::GetReduceCountFut {
        self.mu.lock();

        future::ready(GetReduceCountReply {
            reduce_count: self.reduce_tasks.len() as i32,
        })
    }

    type RequestTaskFut = Ready<RequestTaskReply>;

    fn request_task(
        self,
        _: context::Context,
        args: &'static RequestTaskArgs,
    ) -> Self::RequestTaskFut {
        future::ready(RequestTaskReply {
            task_id: 1,
            task_type: 1,
            task_file: String::from(""),
        })
    }

    type ReportTaskFut = Ready<ReportTaskReply>;

    fn report_task(
        self,
        _: context::Context,
        args: &'static ReportTaskArgs,
    ) -> Self::ReportTaskFut {
        future::ready(ReportTaskReply { can_exit: true })
    }
}

#[tokio::main]
async fn main() -> anyhow::Result<()> {
    let args: Vec<String> = env::args().collect();

    if args.len() < 2 {
        eprintln!("Usage: mrmaster inputfiles...");
        process::exit(1);
    }

    // coordinator::make_coordinator(args, 12);
    let (client_transport, server_transport) = tarpc::transport::channel::unbounded();

    let server = server::BaseChannel::with_defaults(server_transport);
    tokio::spawn(server.execute(Coordinator::new().serve()));

    // WorldClient is generated by the #[tarpc::service] attribute. It has a constructor `new`
    // that takes a config and any Transport as input.
    let client = ProtocolClient::new(client::Config::default(), client_transport).spawn();

    worker(&client).await?;
    // The client has an RPC method for each RPC defined in the annotated trait. It takes the same
    // args as defined, with the addition of a Context, which is always the first arg. The Context
    // specifies a deadline and trace information which can be helpful in debugging requests.
    // let hello = client.hello(context::current(), "Stim".to_string()).await?;

    // println!("{hello}");

    Ok(())
}

async fn worker(client: &ProtocolClient) -> anyhow::Result<()> {
    // let hello = client.hello(context::current(), "Jakob".to_string()).await?;

    // println!("{hello}");
    Ok(())
}
