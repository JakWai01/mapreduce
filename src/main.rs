mod coordinator;
use std::env;
use std::process;
use futures::{
    future::{self, Ready},
    prelude::*,
};
use tarpc::{
    client, context,
    server::{self, incoming::Incoming, Channel},
};

type TaskType = i32;

#[derive(Debug)]
struct GetReduceCountArgs {}

#[derive(Debug)]
struct GetReduceCountReply {
    reduce_count: i32
}

#[derive(Debug)]
struct RequestTaskArgs {
    worker_id: i32
}

#[derive(Debug)]
struct RequestTaskReply {
    task_type: TaskType,
    task_id: i32,
    task_file: String
}

#[derive(Debug)]
struct ReportTaskArgs {
    worker_id: i32,
    task_type: TaskType,
    task_id: i32
}

#[derive(Debug)]
struct ReportTaskReply {
    can_exit: bool
}


// This is the service definition. It looks like a trait definition.
// It defines one RPC, hello, which takes one arg, name, and returns a String.
#[tarpc::service]
trait World {
    // Returns a greeting for name.
    async fn hello(name: String) -> String;

    async fn get_reduce_count(args: &'static GetReduceCountArgs) -> GetReduceCountReply;

    async fn request_task(args: &'static RequestTaskArgs) -> RequestTaskReply;

    async fn report_task(args: &'static ReportTaskArgs) ->  ReportTaskReply;
}

#[derive(Clone)]
struct HelloServer;

impl World for HelloServer {
    // Each defined rpc generates two items in trait, a fn that serves the RPC, and
    // and associated type representing the future output by the fn.

    type HelloFut = Ready<String>;

    fn hello(self, _: context::Context, name: String) -> Self::HelloFut {
        future::ready(format!("Hello, {name}!"))
    }

    type GetReduceCountFut = Ready<GetReduceCountReply>;

    fn get_reduce_count(self, _: context::Context, args: &'static GetReduceCountArgs) -> Self::GetReduceCountFut {
        future::ready(GetReduceCountReply{
            reduce_count: 1,
        })
    }

    type RequestTaskFut = Ready<RequestTaskReply>;

    fn request_task(self, _: context::Context, args: &'static RequestTaskArgs) -> Self::RequestTaskFut {
        future::ready(RequestTaskReply{
            task_id: 1,
            task_type: 1,
            task_file: String::from(""),
        })
    }

    type ReportTaskFut = Ready<ReportTaskReply>;

    fn report_task(self, _: context::Context, args: &'static ReportTaskArgs) -> Self::ReportTaskFut {
        future::ready(ReportTaskReply{
            can_exit: true,
        })
    }

}

// mrcoordinator.rs
#[tokio::main]
async fn main() -> anyhow::Result<()> {
    let args: Vec<String> = env::args().collect();

    if args.len() < 2 {
        eprintln!("Usage: mrmaster inputfiles...");
        process::exit(1);
    }

    // coordinator::make_coordinator(args, 12);
    let (client_transport, server_transport) = tarpc::transport::channel::unbounded();

    let server = server::BaseChannel::with_defaults(server_transport);
    tokio::spawn(server.execute(HelloServer.serve()));

    // WorldClient is generated by the #[tarpc::service] attribute. It has a constructor `new`
    // that takes a config and any Transport as input.
    let client = WorldClient::new(client::Config::default(), client_transport).spawn();

    worker(&client).await?;
    // The client has an RPC method for each RPC defined in the annotated trait. It takes the same
    // args as defined, with the addition of a Context, which is always the first arg. The Context
    // specifies a deadline and trace information which can be helpful in debugging requests.
    // let hello = client.hello(context::current(), "Stim".to_string()).await?;

    // println!("{hello}");

    Ok(())
}

async fn worker(client: &WorldClient) -> anyhow::Result<()> {
    let hello = client.hello(context::current(), "Jakob".to_string()).await?;

    println!("{hello}");
    Ok(())
}